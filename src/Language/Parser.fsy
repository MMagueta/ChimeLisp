%{
open Language
%}

%start parse
%token <string> SYMBOL
%token <string> IDENTIFIER
%token <string> LITERAL_STRING
%token <int> LITERAL_INTEGER
%token <float32> LITERAL_FLOAT
%token LEFT_LIM RIGHT_LIM EOF
%type <Expression.t list> parse

%%

Expr: IDENTIFIER { Expression.EAtom $1 }
    | LITERAL_STRING { Expression.EString $1 }
    | SYMBOL { Expression.EAtom $1 }
    | LITERAL_INTEGER { Expression.EInteger $1 }
    | LITERAL_FLOAT { Expression.EFloat $1 }
    | LEFT_LIM ExprList RIGHT_LIM { $2 |> List.rev |> Expression.EList }
    // | APOSTROPHE Expr { Expression.List [ Expression.Atom "QUOTE"; $2 ] }

ExprList: Expr { [ $1 ] }
        | ExprList Expr { $2 :: $1  }

parse: ExprList EOF { List.rev $1 }
    | EOF { [] }
