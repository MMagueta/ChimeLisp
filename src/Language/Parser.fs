// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Language

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LEFT_LIM
  | RIGHT_LIM
  | EOF
  | LITERAL_FLOAT of (float32)
  | LITERAL_INTEGER of (int)
  | LITERAL_STRING of (string)
  | IDENTIFIER of (string)
  | SYMBOL of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LEFT_LIM
    | TOKEN_RIGHT_LIM
    | TOKEN_EOF
    | TOKEN_LITERAL_FLOAT
    | TOKEN_LITERAL_INTEGER
    | TOKEN_LITERAL_STRING
    | TOKEN_IDENTIFIER
    | TOKEN_SYMBOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_Expr
    | NONTERM_ExprList
    | NONTERM_parse

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LEFT_LIM  -> 0 
  | RIGHT_LIM  -> 1 
  | EOF  -> 2 
  | LITERAL_FLOAT _ -> 3 
  | LITERAL_INTEGER _ -> 4 
  | LITERAL_STRING _ -> 5 
  | IDENTIFIER _ -> 6 
  | SYMBOL _ -> 7 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LEFT_LIM 
  | 1 -> TOKEN_RIGHT_LIM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_LITERAL_FLOAT 
  | 4 -> TOKEN_LITERAL_INTEGER 
  | 5 -> TOKEN_LITERAL_STRING 
  | 6 -> TOKEN_IDENTIFIER 
  | 7 -> TOKEN_SYMBOL 
  | 10 -> TOKEN_end_of_input
  | 8 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparse 
    | 1 -> NONTERM_Expr 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_ExprList 
    | 8 -> NONTERM_ExprList 
    | 9 -> NONTERM_parse 
    | 10 -> NONTERM_parse 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 10 
let _fsyacc_tagOfErrorTerminal = 8

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LEFT_LIM  -> "LEFT_LIM" 
  | RIGHT_LIM  -> "RIGHT_LIM" 
  | EOF  -> "EOF" 
  | LITERAL_FLOAT _ -> "LITERAL_FLOAT" 
  | LITERAL_INTEGER _ -> "LITERAL_INTEGER" 
  | LITERAL_STRING _ -> "LITERAL_STRING" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | SYMBOL _ -> "SYMBOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LEFT_LIM  -> (null : System.Object) 
  | RIGHT_LIM  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LITERAL_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SYMBOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;4us;65535us;0us;10us;7us;10us;8us;12us;11us;12us;2us;65535us;0us;11us;7us;8us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;6us;9us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;4us;1us;5us;1us;6us;2us;6us;8us;1us;6us;1us;7us;2us;8us;9us;1us;8us;1us;9us;1us;10us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;19us;21us;23us;26us;28us;30us;|]
let _fsyacc_action_rows = 15
let _fsyacc_actionTableElements = [|7us;32768us;0us;7us;2us;14us;3us;6us;4us;5us;5us;3us;6us;2us;7us;4us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;0us;16389us;6us;32768us;0us;7us;3us;6us;4us;5us;5us;3us;6us;2us;7us;4us;7us;32768us;0us;7us;1us;9us;3us;6us;4us;5us;5us;3us;6us;2us;7us;4us;0us;16390us;0us;16391us;7us;32768us;0us;7us;2us;13us;3us;6us;4us;5us;5us;3us;6us;2us;7us;4us;0us;16392us;0us;16393us;0us;16394us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;10us;11us;12us;13us;14us;21us;29us;30us;31us;39us;40us;41us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;1us;1us;3us;1us;2us;2us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;2us;2us;3us;3us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;16388us;16389us;65535us;65535us;16390us;16391us;65535us;16392us;16393us;16394us;|]
let _fsyacc_reductions = lazy [|
# 120 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expression.t list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparse));
# 129 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                                        Expression.EAtom _1 
                   )
# 16 "Parser.fsy"
                 : 'gentype_Expr));
# 140 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 17 "Parser.fsy"
                                            Expression.EString _1 
                   )
# 17 "Parser.fsy"
                 : 'gentype_Expr));
# 151 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                    Expression.EAtom _1 
                   )
# 18 "Parser.fsy"
                 : 'gentype_Expr));
# 162 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                             Expression.EInteger _1 
                   )
# 19 "Parser.fsy"
                 : 'gentype_Expr));
# 173 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                           Expression.EFloat _1 
                   )
# 20 "Parser.fsy"
                 : 'gentype_Expr));
# 184 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                                         _2 |> List.rev |> Expression.EList 
                   )
# 21 "Parser.fsy"
                 : 'gentype_Expr));
# 195 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                      [ _1 ] 
                   )
# 24 "Parser.fsy"
                 : 'gentype_ExprList));
# 206 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprList in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                               _2 :: _1  
                   )
# 25 "Parser.fsy"
                 : 'gentype_ExprList));
# 218 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                           List.rev _1 
                   )
# 27 "Parser.fsy"
                 : Expression.t list));
# 229 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                 [] 
                   )
# 28 "Parser.fsy"
                 : Expression.t list));
|]
# 240 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 11;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parse lexer lexbuf : Expression.t list =
    engine lexer lexbuf 0 :?> _
